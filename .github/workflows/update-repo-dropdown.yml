name: Update Repo Dropdown

on:
  workflow_dispatch:
    inputs:
      include-archived:
        description: "Inclure les repos archivÃ©s ?"
        required: false
        default: "false"
        type: choice
        options: ["false", "true"]
      include-forks:
        description: "Inclure les forks ?"
        required: false
        default: "false"
        type: choice
        options: ["false", "true"]
      name-prefix:
        description: "Filtrer sur un prÃ©fixe (optionnel, ex: pulse-)"
        required: false
        default: ""
        type: string

permissions:
  contents: write # Ã©crire dans le repo (.github)

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      # IMPORTANT: pas de creds GitHub par dÃ©faut, on push avec PAT ensuite
      - name: Checkout .github repo (no creds)
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check gh CLI
        run: gh --version

      - name: Build repo list and update dropdown
        env:
          GH_TOKEN: ${{ secrets.ORG_LABELS_TOKEN }} # PAT avec read:org (peut Ãªtre le mÃªme que ORG_WORKFLOWS_TOKEN)
          ORG: ${{ github.repository_owner }}
          INCLUDE_ARCHIVED: ${{ github.event.inputs.include-archived }}
          INCLUDE_FORKS: ${{ github.event.inputs.include-forks }}
          NAME_PREFIX: ${{ github.event.inputs.name-prefix }}
        run: |
          node - <<'EOF'
          const { execFileSync } = require('child_process');
          const fs = require('fs');

          const token = process.env.GH_TOKEN;
          const org = process.env.ORG;
          const includeArchived = (process.env.INCLUDE_ARCHIVED || 'false') === 'true';
          const includeForks = (process.env.INCLUDE_FORKS || 'false') === 'true';
          const prefix = (process.env.NAME_PREFIX || '').trim();

          if (!token) { console.error('Missing ORG_LABELS_TOKEN.'); process.exit(1); }

          function ghJson(path) {
            const out = execFileSync('gh', ['api', '-H', 'Accept: application/vnd.github+json', path], {
              env: { ...process.env, GH_TOKEN: token },
              stdio: ['ignore', 'pipe', 'inherit'],
              encoding: 'utf8'
            });
            return JSON.parse(out);
          }

          // list org repos (paginated)
          let page = 1, repos = [];
          while (true) {
            const res = ghJson(`orgs/${org}/repos?per_page=100&page=${page}`);
            if (!res.length) break;
            repos = repos.concat(res);
            page++;
          }

          // filter + sort
          repos = repos
            .filter(r => includeArchived || !r.archived)
            .filter(r => includeForks || !r.fork)
            .map(r => r.name)
            .filter(name => !prefix || name.startsWith(prefix))
            .sort((a,b) => a.localeCompare(b));

          if (!repos.length) {
            console.error('No repositories match the filters.');
            process.exit(1);
          }

          const filePath = '.github/workflows/sync-one-repo.yml';
          let yml = fs.readFileSync(filePath, 'utf8');

          const start = '          # BEGIN_REPO_OPTIONS';
          const end   = '          # END_REPO_OPTIONS';
          const s = yml.indexOf(start);
          const e = yml.indexOf(end);
          if (s === -1 || e === -1 || e < s) {
            console.error('Markers not found in sync-one-repo.yml');
            process.exit(1);
          }

          const block = [start]
            .concat(repos.map(r => `          - ${r}`))
            .concat([end])
            .join('\n');

          const newYml = yml.slice(0, s) + block + yml.slice(e + end.length);
          if (newYml !== yml) {
            fs.writeFileSync(filePath, newYml, 'utf8');
            console.log(`Updated options with ${repos.length} repos.`);
          } else {
            console.log('No changes needed.');
          }
          EOF

      - name: Show preview (debug)
        run: sed -n '1,140p' .github/workflows/sync-one-repo.yml

      # ðŸ‘‰ Push avec PAT ayant le scope `workflow`
      - name: Commit & push with PAT
        env:
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          PAT: ${{ secrets.ORG_LABELS_TOKEN }}
        run: |
          if ! git diff --quiet -- .github/workflows/sync-one-repo.yml; then
            git config user.name  "TKorpXR bot"
            git config user.email "actions@users.noreply.github.com"
            git add .github/workflows/sync-one-repo.yml
            git commit -m "chore: refresh repo dropdown options"
            git remote set-url origin https://x-access-token:${PAT}@github.com/${REPO}.git
            git push origin HEAD:${BRANCH}
          else
            echo "No changes to commit."
          fi
